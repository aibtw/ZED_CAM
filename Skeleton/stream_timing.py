# This script is not related to ZED camera, but we use it to calculate required
# time to transfer an array of shape (1, <win_size>, <n_dims>, <n_joints>, 1) 
# between two devices.

# The script was generated by an AI model

# The script has both sender and receiver sides. 
# Comment out the side you don't need.

# =========================================================================== #
# Sender Side =============================================================== #
import numpy as np
import socket
import time

# Create a random numpy array
arr = np.random.rand(1, 20, 3, 18, 1)

# Serialize the array
serialized_array = arr.dumps()

# Initialize socket connection
host = 'IP_ADDRESS_OF_COMPUTER_2'  # Replace with the actual IP address of Computer 2
port = 12345  # Choose a port number
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

# Send the serialized array

for i in range(100):
    start_time = time.time()
    s.sendall(serialized_array)

    # Receive the serialized array back
    received_data = s.recv(len(serialized_array))
    deserialized_array = np.loads(received_data)
    end_time = time.time()

    # Calculate round trip time
    rtt = end_time - start_time
    print("Round trip time:", rtt)

# Close the socket connection
s.close()


# =========================================================================== #
# Receiver Side ============================================================= #
import numpy as np
import socket

# Initialize socket connection
host = '0.0.0.0'  # Listen on all available network interfaces
port = 12345  # Choose the same port number used in Computer 1
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(1)

# Accept the incoming connection
client_socket, addr = s.accept()

# Receive the serialized array
for i in range(100):
    start_time = time.time()
    received_data = client_socket.recv(4096)

    # Deserialize the array
    deserialized_array = np.loads(received_data)

    # Process the array as needed
    # ...

    # Send the deserialized array back
    client_socket.sendall(received_data)
    end_time = time.time()

# Close the socket connection
client_socket.close()
s.close()
